from tkinter import *
import time
import ttkthemes
from tkinter import ttk, messagebox, filedialog
import pymysql
import pandas
from PIL import Image, ImageTk  # ✅ Required for JPEG support

# ==================== FUNCTIONALITY PART ====================

def iexit():
    result = messagebox.askyesno('Confirm', 'Do you want to exit?')
    if result:
        root.destroy()


def export_data():
    url = filedialog.asksaveasfilename(defaultextension='.csv')
    indexing = studentTable.get_children()
    newlist = [studentTable.item(index)['values'] for index in indexing]
    table = pandas.DataFrame(newlist, columns=['Id', 'Name', 'Mobile', 'Email', 'Address', 'Gender', 'DOB', 'Added Date', 'Added Time'])
    table.to_csv(url, index=False)
    messagebox.showinfo('Success', 'Data is saved successfully')


def toplevel_data(title, button_text, command):
    global idEntry, phoneEntry, nameEntry, emailEntry, addressEntry, genderEntry, dobEntry, screen
    screen = Toplevel()
    screen.title(title)
    screen.grab_set()
    screen.resizable(False, False)

    # Labels & Entry Fields
    fields = ['Id', 'Name', 'Phone', 'Email', 'Address', 'Gender', 'D.O.B']
    entries = []

    for idx, field in enumerate(fields):
        label = Label(screen, text=field, font=('times new roman', 20, 'bold'))
        label.grid(row=idx, column=0, padx=30, pady=15, sticky=W)

        entry = Entry(screen, font=('roman', 15, 'bold'), width=24)
        entry.grid(row=idx, column=1, pady=15, padx=10)
        entries.append(entry)

    idEntry, nameEntry, phoneEntry, emailEntry, addressEntry, genderEntry, dobEntry = entries

    student_button = ttk.Button(screen, text=button_text, command=command)
    student_button.grid(row=7, columnspan=2, pady=15)

    if title == 'Update Student':
        indexing = studentTable.focus()
        content = studentTable.item(indexing)
        listdata = content['values']
        for entry, data in zip(entries, listdata):
            entry.insert(0, data)


def update_data():
    query = 'update student set name=%s,mobile=%s,email=%s,address=%s,gender=%s,dob=%s,date=%s,time=%s where id=%s'
    mycursor.execute(query, (
        nameEntry.get(), phoneEntry.get(), emailEntry.get(), addressEntry.get(),
        genderEntry.get(), dobEntry.get(), date, currenttime, idEntry.get()))
    con.commit()
    messagebox.showinfo('Success', f'Id {idEntry.get()} is modified successfully', parent=screen)
    screen.destroy()
    show_student()


def show_student():
    query = 'select * from student'
    mycursor.execute(query)
    fetched_data = mycursor.fetchall()
    studentTable.delete(*studentTable.get_children())
    for data in fetched_data:
        studentTable.insert('', END, values=data)


def delete_student():
    indexing = studentTable.focus()
    content = studentTable.item(indexing)
    content_id = content['values'][0]
    query = 'delete from student where id=%s'
    mycursor.execute(query, (content_id,))
    con.commit()
    messagebox.showinfo('Deleted', f'Id {content_id} is deleted successfully')
    show_student()


def search_data():
    query = '''select * from student where id=%s or name=%s or email=%s or mobile=%s or address=%s or gender=%s or dob=%s'''
    mycursor.execute(query, (
        idEntry.get(), nameEntry.get(), emailEntry.get(), phoneEntry.get(),
        addressEntry.get(), genderEntry.get(), dobEntry.get()))
    studentTable.delete(*studentTable.get_children())
    for data in mycursor.fetchall():
        studentTable.insert('', END, values=data)


def add_data():
    if '' in (idEntry.get(), nameEntry.get(), phoneEntry.get(), emailEntry.get(),
              addressEntry.get(), genderEntry.get(), dobEntry.get()):
        messagebox.showerror('Error', 'All Fields are required', parent=screen)
    else:
        try:
            query = 'insert into student values(%s,%s,%s,%s,%s,%s,%s,%s,%s)'
            mycursor.execute(query, (
                idEntry.get(), nameEntry.get(), phoneEntry.get(), emailEntry.get(), addressEntry.get(),
                genderEntry.get(), dobEntry.get(), date, currenttime))
            con.commit()
            result = messagebox.askyesno('Confirm', 'Data added successfully. Do you want to clear the form?', parent=screen)
            if result:
                for entry in [idEntry, nameEntry, phoneEntry, emailEntry, addressEntry, genderEntry, dobEntry]:
                    entry.delete(0, END)
        except:
            messagebox.showerror('Error', 'Id cannot be repeated', parent=screen)
        show_student()


def connect_database():
    def connect():
        global mycursor, con
        try:
            con = pymysql.connect(
                host=hostEntry.get(), user=usernameEntry.get(), password=passwordEntry.get())
            mycursor = con.cursor()
        except:
            messagebox.showerror('Error', 'Invalid Details', parent=connectWindow)
            return

        try:
            mycursor.execute('create database studentmanagementsystem')
            mycursor.execute('use studentmanagementsystem')
            mycursor.execute('''create table student(
                id int primary key, name varchar(30), mobile varchar(10), email varchar(30),
                address varchar(100), gender varchar(20), dob varchar(20), date varchar(50), time varchar(50))''')
        except:
            mycursor.execute('use studentmanagementsystem')

        messagebox.showinfo('Success', 'Database Connected Successfully', parent=connectWindow)
        connectWindow.destroy()
        for button in [addstudentButton, searchstudentButton, updatestudentButton,
                       showstudentButton, exportstudentButton, deletestudentButton]:
            button.config(state=NORMAL)

    connectWindow = Toplevel()
    connectWindow.grab_set()
    connectWindow.geometry('470x250+730+230')
    connectWindow.title('Database Connection')
    connectWindow.resizable(0, 0)

    # Labels & Entries
    Label(connectWindow, text='Host Name', font=('arial', 20, 'bold')).grid(row=0, column=0, padx=20)
    hostEntry = Entry(connectWindow, font=('roman', 15, 'bold'), bd=2)
    hostEntry.grid(row=0, column=1, padx=40, pady=20)

    Label(connectWindow, text='User Name', font=('arial', 20, 'bold')).grid(row=1, column=0, padx=20)
    usernameEntry = Entry(connectWindow, font=('roman', 15, 'bold'), bd=2)
    usernameEntry.grid(row=1, column=1, padx=40, pady=20)

    Label(connectWindow, text='Password', font=('arial', 20, 'bold')).grid(row=2, column=0, padx=20)
    passwordEntry = Entry(connectWindow, font=('roman', 15, 'bold'), bd=2, show='*')
    passwordEntry.grid(row=2, column=1, padx=40, pady=20)

    ttk.Button(connectWindow, text='CONNECT', command=connect).grid(row=3, columnspan=2)

# ==================== GUI PART ====================
count = 0
text = ''


def slider():
    global text, count
    if count == len(s):
        count = 0
        text = ''
    text += s[count]
    sliderLabel.config(text=text)
    count += 1
    sliderLabel.after(300, slider)


def clock():
    global date, currenttime
    date = time.strftime('%d/%m/%Y')
    currenttime = time.strftime('%H:%M:%S')
    datetimeLabel.config(text=f'   Date: {date}\nTime: {currenttime}')
    datetimeLabel.after(1000, clock)


# ROOT WINDOW
root = ttkthemes.ThemedTk()
root.get_themes()
root.set_theme('radiance')
root.geometry('1174x680+0+0')
root.resizable(0, 0)
root.title('Student Management System')

datetimeLabel = Label(root, font=('times new roman', 18, 'bold'))
datetimeLabel.place(x=5, y=5)
clock()

s = 'Student Management System'
sliderLabel = Label(root, font=('arial', 28, 'italic bold'), width=30)
sliderLabel.place(x=200, y=0)
slider()

connectButton = ttk.Button(root, text='Connect Database', command=connect_database)
connectButton.place(x=980, y=0)

# LEFT FRAME
leftFrame = Frame(root)
leftFrame.place(x=50, y=80, width=300, height=600)

# ✅ Corrected image loading (supports JPEG)
image = Image.open('login.jpeg')
logo_image = ImageTk.PhotoImage(image)
logo_Label = Label(leftFrame, image=logo_image)
logo_Label.grid(row=0, column=0)

addstudentButton = ttk.Button(leftFrame, text='Add Student', width=25, state=DISABLED,
                              command=lambda: toplevel_data('Add Student', 'Add', add_data))
addstudentButton.grid(row=1, column=0, pady=20)

searchstudentButton = ttk.Button(leftFrame, text='Search Student', width=25, state=DISABLED,
                                 command=lambda: toplevel_data('Search Student', 'Search', search_data))
searchstudentButton.grid(row=2, column=0, pady=20)

deletestudentButton = ttk.Button(leftFrame, text='Delete Student', width=25, state=DISABLED, command=delete_student)
deletestudentButton.grid(row=3, column=0, pady=20)

updatestudentButton = ttk.Button(leftFrame, text='Update Student', width=25, state=DISABLED,
                                 command=lambda: toplevel_data('Update Student', 'Update', update_data))
updatestudentButton.grid(row=4, column=0, pady=20)

showstudentButton = ttk.Button(leftFrame, text='Show Student', width=25, state=DISABLED, command=show_student)
showstudentButton.grid(row=5, column=0, pady=20)

exportstudentButton = ttk.Button(leftFrame, text='Export Data', width=25, state=DISABLED, command=export_data)
exportstudentButton.grid(row=6, column=0, pady=20)

exitButton = ttk.Button(leftFrame, text='Exit', width=25, command=iexit)
exitButton.grid(row=7, column=0, pady=20)

# RIGHT FRAME
rightFrame = Frame(root)
rightFrame.place(x=350, y=80, width=820, height=600)

scrollBarX = Scrollbar(rightFrame, orient=HORIZONTAL)
scrollBarY = Scrollbar(rightFrame, orient=VERTICAL)

studentTable = ttk.Treeview(rightFrame, columns=(
    'Id', 'Name', 'Mobile', 'Email', 'Address', 'Gender', 'D.O.B', 'Added Date', 'Added Time'),
    xscrollcommand=scrollBarX.set, yscrollcommand=scrollBarY.set)

scrollBarX.config(command=studentTable.xview)
scrollBarY.config(command=studentTable.yview)
scrollBarX.pack(side=BOTTOM, fill=X)
scrollBarY.pack(side=RIGHT, fill=Y)
studentTable.pack(expand=1, fill=BOTH)

for col in studentTable['columns']:
    studentTable.heading(col, text=col)

studentTable.column('Id', width=50, anchor=CENTER)
studentTable.column('Name', width=200, anchor=CENTER)
studentTable.column('Email', width=300, anchor=CENTER)
studentTable.column('Mobile', width=200, anchor=CENTER)
studentTable.column('Address', width=300, anchor=CENTER)
studentTable.column('Gender', width=100, anchor=CENTER)
studentTable.column('D.O.B', width=200, anchor=CENTER)
studentTable.column('Added Date', width=200, anchor=CENTER)
studentTable.column('Added Time', width=200, anchor=CENTER)

style = ttk.Style()
style.configure('Treeview', rowheight=40, font=('arial', 12, 'bold'), background='white')
style.configure('Treeview.Heading', font=('arial', 14, 'bold'), foreground='red')
studentTable.config(show='headings')

# MAINLOOP
root.mainloop()